import os
import sys
import time
from pathlib import Path
from PyQt6.QtCore import Qt, QSize, pyqtSlot, pyqtSignal
from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
    QLabel, QPushButton, QStatusBar, QProgressBar, 
    QSplitter, QTabWidget, QMessageBox, QDialog,
    QMenuBar, QMenu, QToolBar, QApplication
)
from PyQt6.QtGui import QIcon, QAction, QFont, QPixmap

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
from app.ui.components.resource_monitor import ResourceMonitor
from app.ui.components.music_generator_form import MusicGeneratorForm
from app.ui.components.music_player import MusicPlayer

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
from app.core.ai_engine import load_ai_model, generate_music
from app.core.audio_utils import save_generated_audio
from app.core.utilities import logger

class MainWindow(QMainWindow):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Generative Music"""
    
    def __init__(self):
        super().__init__()
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        self.setWindowTitle("Generative Music")
        self.setMinimumSize(1000, 700)
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
        self.model_loaded = False
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö UI
        self._init_ui()
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        self._connect_signals()
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI
        self._load_ai_model()
        
    def _init_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö UI"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á central widget
        central_widget = QWidget()
        main_layout = QVBoxLayout(central_widget)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á toolbar
        self._create_toolbar()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á menubar
        self._create_menu()
        
        # ‡πÅ‡∏ö‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Splitter
        splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢: ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° resource monitor ‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á
        self.resource_monitor = ResourceMonitor()
        self.music_gen_form = MusicGeneratorForm()
        
        left_layout.addWidget(self.resource_monitor)
        left_layout.addWidget(self.music_gen_form)
        
        # ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        
        self.music_player = MusicPlayer()
        right_layout.addWidget(self.music_player)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà splitter
        splitter.addWidget(left_widget)
        splitter.addWidget(right_widget)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (40% ‡∏ã‡πâ‡∏≤‡∏¢, 60% ‡∏Ç‡∏ß‡∏≤)
        splitter.setSizes([400, 600])
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° splitter ‡πÑ‡∏õ‡∏ó‡∏µ‡πà main layout
        main_layout.addWidget(splitter)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á status bar
        self._create_status_bar()
        
        # ‡∏ï‡∏±‡πâ‡∏á central widget
        self.setCentralWidget(central_widget)
        
    def _create_menu(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ö‡∏≤‡∏£‡πå"""
        menubar = self.menuBar()
        
        # ‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏ü‡∏•‡πå
        file_menu = menubar.addMenu("‡πÑ‡∏ü‡∏•‡πå")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà
        new_action = QAction("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà", self)
        new_action.setShortcut("Ctrl+N")
        new_action.triggered.connect(self._focus_music_gen_form)
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Presets
        manage_presets_action = QAction("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Presets", self)
        manage_presets_action.setShortcut("Ctrl+P")
        manage_presets_action.triggered.connect(self._show_preset_manager)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö Batch
        batch_generate_action = QAction("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö Batch", self)
        batch_generate_action.setShortcut("Ctrl+B")
        batch_generate_action.triggered.connect(self._show_batch_generator)
        
        # ‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°
        interactive_action = QAction("‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°", self)
        interactive_action.setShortcut("Ctrl+I")
        interactive_action.triggered.connect(self._show_interactive_generator)
        
        # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á
        export_action = QAction("‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á", self)
        export_action.setShortcut("Ctrl+E")
        export_action.triggered.connect(lambda: self.music_player._on_export_clicked())
        
        # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        exit_action = QAction("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.triggered.connect(self.close)
        
        file_menu.addAction(new_action)
        file_menu.addAction(manage_presets_action)
        file_menu.addAction(batch_generate_action)
        file_menu.addAction(interactive_action)
        file_menu.addSeparator()
        file_menu.addAction(export_action)
        file_menu.addSeparator()
        file_menu.addAction(exit_action)
        
        # ‡πÄ‡∏°‡∏ô‡∏π AI
        ai_menu = menubar.addMenu("AI")
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà
        reload_model_action = QAction("‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà", self)
        reload_model_action.triggered.connect(self._load_ai_model)
        
        ai_menu.addAction(reload_model_action)
        
        # ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö
        help_menu = menubar.addMenu("‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
        
        # ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        about_action = QAction("‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", self)
        about_action.triggered.connect(self._show_about_dialog)
        
        help_menu.addAction(about_action)
        
    def _create_toolbar(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á toolbar"""
        toolbar = QToolBar("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏Å")
        toolbar.setIconSize(QSize(24, 24))
        self.addToolBar(toolbar)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á
        new_music_action = QAction("üéµ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á", self)
        new_music_action.triggered.connect(self._focus_music_gen_form)
        toolbar.addAction(new_music_action)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Presets
        presets_action = QAction("‚öôÔ∏è Presets", self)
        presets_action.triggered.connect(self._show_preset_manager)
        toolbar.addAction(presets_action)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö Batch 
        batch_action = QAction("üìë Batch", self)
        batch_action.triggered.connect(self._show_batch_generator)
        toolbar.addAction(batch_action)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°
        interactive_action = QAction("üéπ Interactive", self)
        interactive_action.triggered.connect(self._show_interactive_generator)
        toolbar.addAction(interactive_action)
        
        toolbar.addSeparator()
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á
        playlist_action = QAction("üé∂ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á", self)
        playlist_action.triggered.connect(self._focus_music_player)
        toolbar.addAction(playlist_action)
        
        toolbar.addSeparator()
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á
        play_action = QAction("‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô", self)
        play_action.triggered.connect(lambda: self.music_player._on_play_clicked())
        toolbar.addAction(play_action)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á
        stop_action = QAction("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î", self)
        stop_action.triggered.connect(lambda: self.music_player._on_stop_clicked())
        toolbar.addAction(stop_action)
        
    def _create_status_bar(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á status bar"""
        status_bar = QStatusBar()
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.status_label = QLabel("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        status_bar.addWidget(self.status_label)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        self.progress_bar.setVisible(False)
        self.progress_bar.setMaximumWidth(200)
        status_bar.addPermanentWidget(self.progress_bar)
        
        # AI Model status
        self.model_status_label = QLabel("‡πÇ‡∏°‡πÄ‡∏î‡∏• AI: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...")
        status_bar.addPermanentWidget(self.model_status_label)
        
        self.setStatusBar(status_bar)
        
    def _connect_signals(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"""
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á
        self.music_gen_form.generation_requested.connect(self._on_generation_requested)
        
    def _focus_music_gen_form(self):
        """‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á"""
        self.music_gen_form.setFocus()
        self.music_gen_form.prompt_input.setFocus()
        
    def _focus_music_player(self):
        """‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á"""
        self.music_player.setFocus()
        self.music_player.playlist.setFocus()
        
    # Signal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
    model_loaded_signal = pyqtSignal(bool)
    
    def _load_ai_model(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI"""
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.model_status_label.setText("‡πÇ‡∏°‡πÄ‡∏î‡∏• AI: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...")
        self.status_label.setText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI...")
        self.model_loaded = False
        self.music_gen_form.setEnabled(False)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signal ‡∏Å‡∏±‡∏ö slot
        self.model_loaded_signal.connect(self._on_model_loaded)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á signal callback
        load_ai_model(lambda success: self.model_loaded_signal.emit(success))
        
    @pyqtSlot(bool)
    def _on_model_loaded(self, success):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ô UI thread)"""
        if success:
            self.model_status_label.setText("‡πÇ‡∏°‡πÄ‡∏î‡∏• AI: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            self.status_label.setText("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            self.model_loaded = True
            self.music_gen_form.setEnabled(True)
            self._focus_music_gen_form()
        else:
            self.model_status_label.setText("‡πÇ‡∏°‡πÄ‡∏î‡∏• AI: ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            self.status_label.setText("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
            self.model_loaded = False
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            QMessageBox.critical(
                self, 
                "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
                "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            )
            
    def _on_generation_requested(self, params):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if not self.model_loaded:
            QMessageBox.warning(
                self, 
                "‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°", 
                "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà..."
            )
            self.music_gen_form.unlock_form()
            return
            
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á
        is_preview = params.get('is_preview', False)
        
        if is_preview:
            self.status_label.setText(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á...")
        else:
            self.status_label.setText(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á {params['mood']} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß {params['duration']} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            
        # ‡πÅ‡∏™‡∏î‡∏á progress bar
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(10)  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 10%
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á
        generate_music(
            prompt=params['prompt'],
            duration=params['duration'],
            instruments=params['instruments'],
            mood=params['mood'],
            callback=self._on_generation_completed
        )
        
    def _on_generation_completed(self, success, result):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à"""
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï progress bar
        self.progress_bar.setValue(70)
        
        if not success:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            QMessageBox.critical(
                self, 
                "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", 
                f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ: {result}"
            )
            self.status_label.setText("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á")
            self.progress_bar.setVisible(False)
            self.music_gen_form.unlock_form()
            return
            
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏•‡∏á
        self.status_label.setText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏•‡∏á...")
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞ metadata
        audio_data = result['audio_data']
        metadata = result['metadata']
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        file_path = save_generated_audio(audio_data, metadata)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï progress bar
        self.progress_bar.setValue(90)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á
        self.music_player._load_playlist()
        
        # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
        if file_path.exists():
            self.music_player.play_file(file_path)
            
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        duration = int(metadata['duration'])
        self.status_label.setText(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß {duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
        
        # ‡∏ã‡πà‡∏≠‡∏ô progress bar
        self.progress_bar.setValue(100)
        QApplication.processEvents()  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï UI
        time.sleep(0.5)  # ‡πÅ‡∏™‡∏î‡∏á 100% ‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
        self.progress_bar.setVisible(False)
        
        # ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ü‡∏≠‡∏£‡πå‡∏°
        self.music_gen_form.unlock_form()
        
    def _show_preset_manager(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ presets"""
        from app.ui.components.preset_manager_dialog import PresetManagerDialog
        dialog = PresetManagerDialog(self)
        dialog.preset_selected.connect(self._on_preset_selected)
        dialog.exec()
        
    def _show_batch_generator(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö batch"""
        from app.ui.components.batch_generator_dialog import BatchGeneratorDialog
        dialog = BatchGeneratorDialog(self)
        dialog.exec()
        
    def _show_interactive_generator(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°"""
        from app.ui.components.interactive_generator_dialog import InteractiveGeneratorDialog
        dialog = InteractiveGeneratorDialog(self)
        dialog.exec()
        
    def _on_preset_selected(self, preset):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å preset ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ presets"""
        # ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å preset ‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
        self.music_gen_form.set_form_data(
            prompt=preset['prompt'],
            instruments=preset['instruments'],
            mood=preset['mood'],
            duration=preset['duration']
        )
        
    def _show_about_dialog(self):
        """‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡∏≠‡∏∞‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        QMessageBox.about(
            self,
            "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°",
            """<h1>Generative Music</h1>
            <p>‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ AI</p>
            <p>‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ Genmusic Team</p>
            <p>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 1.0.0</p>
            <p>‡πÉ‡∏ä‡πâ MusicGen ‡∏à‡∏≤‡∏Å Meta AI Research</p>
            """
        )
        
    def closeEvent(self, event):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á"""
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        reply = QMessageBox.question(
            self, 
            "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", 
            "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
            self.music_player.media_player.stop()
            self.resource_monitor.stop_monitoring()
            logger.info("‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
            event.accept()
        else:
            event.ignore()
