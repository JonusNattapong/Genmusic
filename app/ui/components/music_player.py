import os
import time
from pathlib import Path
from PyQt6.QtCore import Qt, QUrl, pyqtSignal, pyqtSlot, QTimer
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGroupBox,
    QLabel, QPushButton, QSlider, QListWidget, QListWidgetItem,
    QProgressBar, QFrame, QFileDialog, QMessageBox, QMenu
)
from PyQt6.QtGui import QIcon, QFont, QAction
from PyQt6.QtMultimedia import QMediaPlayer, QAudioOutput

from app.core.audio_utils import get_all_audio_files, delete_audio_file
from app.core.utilities import seconds_to_time_format

class MusicPlayer(QFrame):
    """‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏•‡∏á"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setFrameStyle(QFrame.Shape.StyledPanel | QFrame.Shadow.Raised)
        
        self.current_file = None
        self.media_player = QMediaPlayer()
        self.audio_output = QAudioOutput()
        self.media_player.setAudioOutput(self.audio_output)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UI
        self._init_ui()
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        self._connect_signals()
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á
        self._load_playlist()
        
        # ‡∏ï‡∏±‡πâ‡∏á timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï progress bar
        self.update_timer = QTimer(self)
        self.update_timer.setInterval(100)  # 100 ms
        self.update_timer.timeout.connect(self._update_progress)
        
    def _init_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö UI"""
        main_layout = QVBoxLayout(self)
        
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        title_label = QLabel("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á")
        title_label.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        main_layout.addWidget(title_label)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
        now_playing_group = QGroupBox("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô")
        now_playing_layout = QVBoxLayout(now_playing_group)
        
        self.now_playing_label = QLabel("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô")
        self.now_playing_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.now_playing_label.setStyleSheet("font-weight: bold;")
        now_playing_layout.addWidget(self.now_playing_label)
        
        # Progress bar
        time_layout = QHBoxLayout()
        self.current_time_label = QLabel("00:00")
        self.total_time_label = QLabel("00:00")
        
        self.progress_slider = QSlider(Qt.Orientation.Horizontal)
        self.progress_slider.setRange(0, 100)
        self.progress_slider.setValue(0)
        self.progress_slider.setEnabled(False)
        
        time_layout.addWidget(self.current_time_label)
        time_layout.addWidget(self.progress_slider)
        time_layout.addWidget(self.total_time_label)
        now_playing_layout.addLayout(time_layout)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
        control_layout = QHBoxLayout()
        
        self.play_button = QPushButton("‚ñ∂ ‡πÄ‡∏•‡πà‡∏ô")
        self.stop_button = QPushButton("‚ñ† ‡∏´‡∏¢‡∏∏‡∏î")
        self.pause_button = QPushButton("‚ùö‚ùö ‡∏û‡∏±‡∏Å")
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°
        for button in [self.play_button, self.stop_button, self.pause_button]:
            button.setMinimumWidth(80)
            
        control_layout.addWidget(self.play_button)
        control_layout.addWidget(self.pause_button)
        control_layout.addWidget(self.stop_button)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        self.volume_slider = QSlider(Qt.Orientation.Horizontal)
        self.volume_slider.setRange(0, 100)
        self.volume_slider.setValue(70)  # 70% volume
        self.volume_label = QLabel("üîä")
        
        volume_layout = QHBoxLayout()
        volume_layout.addWidget(self.volume_label)
        volume_layout.addWidget(self.volume_slider)
        
        now_playing_layout.addLayout(control_layout)
        now_playing_layout.addLayout(volume_layout)
        
        main_layout.addWidget(now_playing_group)
        
        # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á
        playlist_group = QGroupBox("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á")
        playlist_layout = QVBoxLayout(playlist_group)
        
        self.playlist = QListWidget()
        self.playlist.setAlternatingRowColors(True)
        playlist_layout.addWidget(self.playlist)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á
        playlist_buttons_layout = QHBoxLayout()
        
        self.refresh_button = QPushButton("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä")
        self.export_button = QPushButton("üíæ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å")
        self.delete_button = QPushButton("üóëÔ∏è ‡∏•‡∏ö")
        
        playlist_buttons_layout.addWidget(self.refresh_button)
        playlist_buttons_layout.addWidget(self.export_button)
        playlist_buttons_layout.addWidget(self.delete_button)
        
        playlist_layout.addLayout(playlist_buttons_layout)
        
        main_layout.addWidget(playlist_group)
        
    def _connect_signals(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"""
        # ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á
        self.play_button.clicked.connect(self._on_play_clicked)
        self.pause_button.clicked.connect(self._on_pause_clicked)
        self.stop_button.clicked.connect(self._on_stop_clicked)
        
        # ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á
        self.playlist.itemDoubleClicked.connect(self._on_playlist_item_double_clicked)
        self.refresh_button.clicked.connect(self._load_playlist)
        self.export_button.clicked.connect(self._on_export_clicked)
        self.delete_button.clicked.connect(self._on_delete_clicked)
        
        # ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì media player
        self.media_player.playbackStateChanged.connect(self._on_playback_state_changed)
        self.media_player.durationChanged.connect(self._on_duration_changed)
        self.media_player.errorOccurred.connect(self._on_error)
        
        # ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì volume slider
        self.volume_slider.valueChanged.connect(self._on_volume_changed)
        self._on_volume_changed(self.volume_slider.value())  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        
        # ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì progress slider
        self.progress_slider.sliderPressed.connect(self._on_progress_slider_pressed)
        self.progress_slider.sliderReleased.connect(self._on_progress_slider_released)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ context menu ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á
        self.playlist.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.playlist.customContextMenuRequested.connect(self._show_playlist_context_menu)
        
    def _load_playlist(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        self.playlist.clear()
        
        # ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        files = get_all_audio_files(sort_by='date', reverse=True)
        
        for file_path in files:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á item ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
            item = QListWidgetItem(file_path.name)
            item.setData(Qt.ItemDataRole.UserRole, str(file_path))
            self.playlist.addItem(item)
            
        if files:
            self.playlist.setCurrentRow(0)
            
    def _on_play_clicked(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô"""
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        if not self.current_file or self.media_player.playbackState() == QMediaPlayer.PlaybackState.StoppedState:
            current_item = self.playlist.currentItem()
            if current_item:
                file_path = Path(current_item.data(Qt.ItemDataRole.UserRole))
                self._play_file(file_path)
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠
            self.media_player.play()
            
    def _on_pause_clicked(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏±‡∏Å"""
        if self.media_player.playbackState() == QMediaPlayer.PlaybackState.PlayingState:
            self.media_player.pause()
            
    def _on_stop_clicked(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏¢‡∏∏‡∏î"""
        self.media_player.stop()
        self.update_timer.stop()
        self.progress_slider.setValue(0)
        self.current_time_label.setText("00:00")
        
    def _play_file(self, file_path):
        """‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏•‡∏á"""
        if not file_path.exists():
            QMessageBox.warning(self, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå", f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_path}")
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            self._load_playlist()
            return
            
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
        self.current_file = file_path
        self.now_playing_label.setText(file_path.name)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ media player
        self.media_player.setSource(QUrl.fromLocalFile(str(file_path)))
        self.media_player.play()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï progress bar
        self.update_timer.start()
        
    def _on_playlist_item_double_clicked(self, item):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á"""
        file_path = Path(item.data(Qt.ItemDataRole.UserRole))
        self._play_file(file_path)
        
    def _on_playback_state_changed(self, state):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        if state == QMediaPlayer.PlaybackState.PlayingState:
            self.play_button.setEnabled(False)
            self.pause_button.setEnabled(True)
            self.stop_button.setEnabled(True)
            self.progress_slider.setEnabled(True)
        elif state == QMediaPlayer.PlaybackState.PausedState:
            self.play_button.setEnabled(True)
            self.pause_button.setEnabled(False)
            self.stop_button.setEnabled(True)
            self.progress_slider.setEnabled(True)
        else:  # StoppedState
            self.play_button.setEnabled(True)
            self.pause_button.setEnabled(False)
            self.stop_button.setEnabled(False)
            self.progress_slider.setEnabled(False)
            self.update_timer.stop()
            
    def _on_duration_changed(self, duration):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        if duration > 0:
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            total_time = seconds_to_time_format(duration // 1000)  # ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô ms ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 1000
            self.total_time_label.setText(total_time)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏û‡∏¥‡∏™‡∏±‡∏¢‡∏Ç‡∏≠‡∏á progress slider
            self.progress_slider.setRange(0, duration)
            
    def _on_volume_changed(self, value):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á (0.0 - 1.0)
        volume = value / 100.0
        self.audio_output.setVolume(volume)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        if value == 0:
            self.volume_label.setText("üîá")
        elif value < 30:
            self.volume_label.setText("üîà")
        elif value < 70:
            self.volume_label.setText("üîâ")
        else:
            self.volume_label.setText("üîä")
            
    def _update_progress(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï progress bar"""
        if not self._is_seeking:
            position = self.media_player.position()
            self.progress_slider.setValue(position)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_time = seconds_to_time_format(position // 1000)  # ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô ms ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 1000
            self.current_time_label.setText(current_time)
            
    def _on_progress_slider_pressed(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà progress slider"""
        self._is_seeking = True
        
    def _on_progress_slider_released(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢ progress slider"""
        self._is_seeking = False
        self.media_player.setPosition(self.progress_slider.value())
        
    def _on_export_clicked(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å"""
        current_item = self.playlist.currentItem()
        if not current_item:
            QMessageBox.warning(self, "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å")
            return
            
        file_path = Path(current_item.data(Qt.ItemDataRole.UserRole))
        if not file_path.exists():
            QMessageBox.warning(self, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå", f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_path}")
            self._load_playlist()
            return
            
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        save_path, _ = QFileDialog.getSaveFileName(
            self, 
            "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏•‡∏á", 
            str(Path.home() / file_path.name), 
            f"{file_path.suffix[1:]} Files (*{file_path.suffix});;All Files (*)"
        )
        
        if not save_path:
            return
            
        try:
            # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
            import shutil
            shutil.copy2(file_path, save_path)
            QMessageBox.information(self, "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà {save_path} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            QMessageBox.critical(self, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
            
    def _on_delete_clicked(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö"""
        current_item = self.playlist.currentItem()
        if not current_item:
            QMessageBox.warning(self, "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
            return
            
        file_path = Path(current_item.data(Qt.ItemDataRole.UserRole))
        
        # ‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
        reply = QMessageBox.question(
            self, 
            "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", 
            f"‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_path.name} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
            if self.current_file == file_path:
                self.media_player.stop()
                self.current_file = None
                self.now_playing_label.setText("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô")
                
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
            if delete_audio_file(file_path):
                # ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                row = self.playlist.row(current_item)
                self.playlist.takeItem(row)
                
                QMessageBox.information(self, "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_path.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            else:
                QMessageBox.warning(self, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_path.name} ‡πÑ‡∏î‡πâ")
                
    def _on_error(self, error, error_string):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á"""
        QMessageBox.warning(self, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á: {error_string}")
        
    def _show_playlist_context_menu(self, position):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á"""
        item = self.playlist.itemAt(position)
        if not item:
            return
            
        menu = QMenu(self)
        
        play_action = QAction("‚ñ∂ ‡πÄ‡∏•‡πà‡∏ô", self)
        play_action.triggered.connect(lambda: self._on_playlist_item_double_clicked(item))
        
        export_action = QAction("üíæ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å", self)
        export_action.triggered.connect(self._on_export_clicked)
        
        delete_action = QAction("üóëÔ∏è ‡∏•‡∏ö", self)
        delete_action.triggered.connect(self._on_delete_clicked)
        
        menu.addAction(play_action)
        menu.addAction(export_action)
        menu.addAction(delete_action)
        
        menu.exec(self.playlist.mapToGlobal(position))
        
    def play_file(self, file_path):
        """‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏•‡∏á (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å)"""
        self._play_file(file_path)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        for i in range(self.playlist.count()):
            item = self.playlist.item(i)
            if Path(item.data(Qt.ItemDataRole.UserRole)) == file_path:
                self.playlist.setCurrentItem(item)
                break 